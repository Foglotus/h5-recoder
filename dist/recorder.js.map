{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/transform/transform.ts","webpack://[name]/./src/index.ts","webpack://[name]/./src/download/download.ts","webpack://[name]/./src/player/player.ts","webpack://[name]/./src/exception/exception.ts","webpack://[name]/./src/recorder/recorder.ts","webpack://[name]/./src/worker/index.ts","webpack://[name]/./node_modules/assist-worker/dist/assistWorker.esm.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","writeString","data","offset","str","length","setUint8","charCodeAt","compress","inputSampleRate","outputSampleRate","rate","compression","Math","max","lData","left","rData","right","floor","result","Float32Array","index","j","temp","encodePCM","bytes","sampleBits","littleEdian","dataLength","buffer","ArrayBuffer","DataView","val","min","setInt8","setInt16","encodeWAV","numChannels","oututSampleBits","sampleRate","byteLength","channelCount","setUint32","setUint16","getUint8","download_1","transform_1","player_1","Index","_super","options","_this","isrecording","ispause","isplaying","__extends","setOption","setNewOption","start","Promise","reject","startRecord","pause","pauseRecord","resume","resumeRecord","stop","stopRecord","play","onplay","default","addPlayEnd","onplayend","dataV","getWAV","getPlayTime","pausePlay","onpauseplay","resumePlay","onresumeplay","stopPlay","onstopplay","destroy","destroyPlay","destroyRecord","getRecordAnalyseData","getAnalyseData","getPlayAnalyseData","getPCM","getData","getPCMBlob","Blob","downloadPCM","pcmBlob","pcmTemp","config","getWAVBlob","type","downloadWAV","wavBlob","download","blob","getChannelData","all","res","lD","rD","getInt16","getInt8","_download","oA","document","createElement","href","window","URL","createObjectURL","click","wavblob","exception_1","source","playTime","playStamp","context","analyser","audioData","isPaused","totalTime","endplayFn","playAudio","decodeAudioData","slice","createBufferSource","onended","currentTime","connect","destination","e","throwError","destroySource","Player","arraybuffer","AudioContext","webkitAudioContext","createAnalyser","fftSize","dataArray","Uint8Array","frequencyBinCount","getByteTimeDomainData","fn","pTime","message","Error","worker_1","assist_worker_1","Recorder","size","lBuffer","rBuffer","tempPCM","inputSampleBits","fileSize","duration","speaking","needRecord","Int16Array","initUserMedia","indexOf","silenceDurationNotify","initRecorder","navigator","mediaDevices","getUserMedia","audio","then","stream","audioInput","createMediaStreamSource","recorder","disconnect","clearRecordStatus","stopStream","closeAudioContext","flat","PCM","set","createScript","createScriptProcessor","createJavaScriptNode","apply","lastProcessAudioDuration","onaudioprocess","vol","inputBuffer","console","debug","lastNoSpeakTime","Date","now","silenceHasNotify","onsilence","onprogress","push","worker_2","createAssistWorker","onMessage","terminate","onwav","encoderToPcmJob","run","onprocess","getTracks","forEach","track","close","state","resolve","undefined","constraints","webkitGetUserMedia","mozGetUserMedia","transformIntoPCM","getPermission","_a","workerMethods","postMessage","_b","wav","__webpack_exports__","isTransferables","MessagePort","self","ImageBitmap","jobs","collections","Map","assistWorker","collect","handler","job","majorScript","toString","workerScript","entries","fromEntries","reduce","variablesStr","JSON","stringify","workerURL","worker","Worker","onmessage","error","done","args","filter","revokeObjectURL","clear"],"mappings":"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","file":"recorder.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","interface dataview {\n    byteLength: number,\n    buffer: {\n        byteLength: number,\n    },\n    getUint8: any,\n}\n\n/**\n * 在data中的offset位置开始写入str字符串\n * @param {TypedArrays} data    二进制数据\n * @param {Number}      offset  偏移量\n * @param {String}      str     字符串\n */\nfunction writeString(data, offset, str): void {\n    for (let i = 0; i < str.length; i++) {\n        data.setUint8(offset + i, str.charCodeAt(i));\n    }\n}\n\n/**\n * 数据合并压缩\n * 根据输入和输出的采样率压缩数据，\n * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\n * 所以输入数据中每隔3取1位\n *\n * @param {float32array} data       [-1, 1]的pcm数据\n * @param {number} inputSampleRate  输入采样率\n * @param {number} outputSampleRate 输出采样率\n * @returns  {float32array}         压缩处理后的二进制数据\n */\nexport function compress(data, inputSampleRate: number, outputSampleRate: number) {\n    // 压缩，根据采样率进行压缩\n    let rate = inputSampleRate / outputSampleRate,\n        compression = Math.max(rate, 1),\n        lData = data.left,\n        rData = data.right,\n        length = Math.floor(( lData.length + rData.length ) / rate),\n        result = new Float32Array(length),\n        index = 0,\n        j = 0;\n\n    // 循环间隔 compression 位取一位数据\n    while (index < length) {\n        // 取整是因为存在比例compression不是整数的情况\n        let temp = Math.floor(j);\n\n        result[index] = lData[temp];\n        index++;\n\n        if (rData.length) {\n            /*\n            * 双声道处理\n            * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\n            * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\n            */\n            result[index] = rData[temp];\n            index++;\n        }\n\n        j += compression;\n    }\n    // 返回压缩后的一维数据\n    return result;\n}\n\n/**\n * 转换到我们需要的对应格式的编码\n *\n * @param {float32array} bytes      pcm二进制数据\n * @param {number}  sampleBits      采样位数\n * @param {boolean} littleEdian     是否是小端字节序\n * @returns {dataview}              pcm二进制数据\n */\nexport function encodePCM(bytes, sampleBits: number, littleEdian: boolean = true) {\n    let offset = 0,\n        dataLength = bytes.length * (sampleBits / 8),\n        buffer = new ArrayBuffer(dataLength),\n        data = new DataView(buffer);\n\n    // 写入采样数据\n    if (sampleBits === 8) {\n        for (let i = 0; i < bytes.length; i++, offset++) {\n            // 范围[-1, 1]\n            let s = Math.max(-1, Math.min(1, bytes[i]));\n            // 8位采样位划分成2^8=256份，它的范围是0-255;\n            // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\n            let val = s < 0 ? s * 128 : s * 127;\n            val = +val + 128;\n            data.setInt8(offset, val);\n        }\n    } else {\n        for (let i = 0; i < bytes.length; i++, offset += 2) {\n            let s = Math.max(-1, Math.min(1, bytes[i]));\n            // 16位的划分的是2^16=65536份，范围是-32768到32767\n            // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\n            data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, littleEdian);\n        }\n    }\n\n    return data;\n}\n\n/**\n * 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\n * 所以，此处只需要在pcm数据前增加下就行了。\n *\n * @param {DataView} bytes           pcm二进制数据\n * @param {number}  inputSampleRate  输入采样率\n * @param {number}  outputSampleRate 输出采样率\n * @param {number}  numChannels      声道数\n * @param {number}  oututSampleBits  输出采样位数\n * @param {boolean} littleEdian      是否是小端字节序\n * @returns {DataView}               wav二进制数据\n */\nexport function encodeWAV(bytes: dataview, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number, littleEdian: boolean = true) {\n    let sampleRate = outputSampleRate > inputSampleRate ? inputSampleRate : outputSampleRate,   // 输出采样率较大时，仍使用输入的值，\n        sampleBits = oututSampleBits,\n        buffer = new ArrayBuffer(44 + bytes.byteLength),\n        data = new DataView(buffer),\n        channelCount = numChannels, // 声道\n        offset = 0;\n\n    // 资源交换文件标识符\n    writeString(data, offset, 'RIFF'); offset += 4;\n    // 下个地址开始到文件尾总字节数,即文件大小-8\n    data.setUint32(offset, 36 + bytes.byteLength, littleEdian); offset += 4;\n    // WAV文件标志\n    writeString(data, offset, 'WAVE'); offset += 4;\n    // 波形格式标志\n    writeString(data, offset, 'fmt '); offset += 4;\n    // 过滤字节,一般为 0x10 = 16\n    data.setUint32(offset, 16, littleEdian); offset += 4;\n    // 格式类别 (PCM形式采样数据)\n    data.setUint16(offset, 1, littleEdian); offset += 2;\n    // 声道数\n    data.setUint16(offset, channelCount, littleEdian); offset += 2;\n    // 采样率,每秒样本数,表示每个通道的播放速度\n    data.setUint32(offset, sampleRate, littleEdian); offset += 4;\n    // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\n    data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), littleEdian); offset += 4;\n    // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\n    data.setUint16(offset, channelCount * (sampleBits / 8), littleEdian); offset += 2;\n    // 采样位数\n    data.setUint16(offset, sampleBits, littleEdian); offset += 2;\n    // 数据标识符\n    writeString(data, offset, 'data'); offset += 4;\n    // 采样数据总数,即数据总大小-44\n    data.setUint32(offset, bytes.byteLength, littleEdian); offset += 4;\n\n    // 给wav头增加pcm体\n    for (let i = 0; i < bytes.byteLength;) {\n        data.setUint8(offset, bytes.getUint8(i));\n        offset++;\n        i++;\n    }\n\n    return data;\n}\n","import { downloadPCM, downloadWAV, download } from './download/download';\nimport { compress, encodePCM, encodeWAV } from './transform/transform';\nimport Player from './player/player';\nimport Recorder from './recorder/recorder';\n\ndeclare let window: any;\ndeclare let Math: any;\ndeclare let navigator: any;\ndeclare let Promise: any;\n\n// 构造函数参数格式\ninterface recorderConfig {\n    sampleBits?: number,        // 采样位数\n    sampleRate?: number,        // 采样率\n    numChannels?: number,       // 声道数\n    compiling?: boolean,        // 是否边录边播\n    silenceDurationNotify?: number\n}\n\nclass Index extends Recorder {\n    private isrecording: boolean = false;       // 是否正在录音\n    private ispause: boolean = false;           // 是否是暂停\n    private isplaying: boolean = false;         // 是否正在播放\n\n    public onplay: () => void;                  // 音频播放回调\n    public onpauseplay: () => void;             // 音频暂停回调\n    public onresumeplay: () => void;            // 音频恢复播放回调\n    public onstopplay: () => void;              // 音频停止播放回调\n    public onplayend: () => void;               // 音频正常播放结束\n    public onwav: (wav: any) => void;                   // 定时发送当前音频\n    public onsilence: () => void;               // 用户长时间未说话回调\n    /**\n     * @param {Object} options 包含以下三个参数：\n     * sampleBits，采样位数，一般8,16，默认16\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\n     * numChannels，声道，1或2\n     */\n    constructor(options: recorderConfig = {}) {\n        super(options);\n    }\n\n    /**\n     * 重新修改配置\n     *\n     * @param {recorderConfig} [options={}]\n     * @memberof Recorder\n     */\n    public setOption(options: recorderConfig = {}) {\n        this.setNewOption(options);\n    }\n\n    /**\n     * Start the recording\n     */\n    start(): Promise<{}> {\n        if (this.isrecording) {\n            // 正在录音，则不允许\n            return Promise.reject();\n        }\n\n        this.isrecording = true;\n\n        return this.startRecord();\n    }\n\n    /**\n     * Pause the recording\n     */\n    pause(): void {\n        if (this.isrecording && !this.ispause) {\n            this.ispause = true;\n            // 当前不暂停的时候才可以暂停\n            this.pauseRecord();\n        }\n    }\n\n    /**\n     * 继续录音\n     */\n    resume(): void {\n        if (this.isrecording && this.ispause) {\n            this.ispause = false;\n            this.resumeRecord();\n        }\n    }\n\n    /**\n     * 停止录音\n     *\n     * @memberof Recorder\n     */\n    stop(): void {\n        if (this.isrecording) {\n            this.isrecording = false;\n            this.ispause = false;\n            this.stopRecord();\n        }\n    }\n\n    /**\n     * 播放录音\n     */\n    play(): void {\n        this.stop();\n        // 关闭前一次音频播放\n        this.isplaying = true;\n\n        this.onplay && this.onplay();\n        Player.addPlayEnd(this.onplayend);  // 注册播放完成后的回调事件\n\n        const dataV = this.getWAV();\n\n        if (dataV.byteLength > 44) {\n            Player.play(dataV.buffer);  // 播放\n        }\n    }\n\n    /**\n     * 获取已经播放了多长时间\n     */\n    getPlayTime(): number {\n        return Player.getPlayTime();\n    }\n\n    /**\n     * 暂停播放录音\n     *\n     * @memberof Recorder\n     */\n    pausePlay(): void {\n        if (this.isrecording || !this.isplaying) {\n            // 正在录音或没有播放，暂停无效\n            return;\n        }\n\n        this.isplaying = false;\n        this.onpauseplay && this.onpauseplay();\n        Player.pausePlay();\n    }\n\n    /**\n     * 恢复播放录音\n     *\n     * @memberof Recorder\n     */\n    resumePlay(): void {\n        if (this.isrecording || this.isplaying) {\n            // 正在录音或已经播放或没开始播放，恢复无效\n            return;\n        }\n\n        this.isplaying = true;\n        this.onresumeplay && this.onresumeplay();\n        Player.resumePlay();\n    }\n\n    /**\n     * 停止播放\n     *\n     * @memberof Recorder\n     */\n    stopPlay(): void {\n        if (this.isrecording) {\n            // 正在录音，停止录音播放无效\n            return;\n        }\n\n        this.isplaying = false;\n        this.onstopplay && this.onstopplay();\n        Player.stopPlay();\n    }\n\n    destroy(): Promise<{}> {\n        Player.destroyPlay();\n\n        return this.destroyRecord();\n    }\n\n    /**\n     * 获取当前已经录音的PCM音频数据\n     *\n     * @returns[DataView]\n     * @memberof Recorder\n     */\n    // getWholeData() {\n    //     return this.tempPCM;\n    // }\n\n    /**\n     * 获取余下的新数据，不包括 getNextData 前一次获取的数据\n     *\n     * @returns [DataView]\n     * @memberof Recorder\n     */\n    // getNextData() {\n    //     let length = this.tempPCM.length,\n    //         data = this.tempPCM.slice(this.offset);\n\n    //     this.offset = length;\n\n    //     return data;\n    // }\n\n    /**\n     * 获取当前录音的波形数据，\n     * 调取频率由外部控制。\n     *\n     * @memberof Recorder\n     */\n    getRecordAnalyseData(): any {\n        return this.getAnalyseData();\n    }\n\n    /**\n     * 获取录音播放时的波形数据，\n     *\n     * @memberof Recorder\n     */\n    getPlayAnalyseData(): any {\n        // 现在录音和播放不允许同时进行，所有复用的录音的analyser节点。\n        return Player.getAnalyseData();\n    }\n\n    getPCM(): any {\n        // 先停止\n        this.stop();\n        // 获取pcm数据\n        let data: any = this.getData();\n        // 根据输入输出比例 压缩或扩展\n        data = compress(data, this.inputSampleRate, this.outputSampleRate);\n        // 按采样位数重新编码\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\n    }\n\n    /**\n     * 获取PCM格式的blob数据\n     *\n     * @returns { blob }  PCM格式的blob数据\n     * @memberof Recorder\n     */\n    getPCMBlob(): any {\n        return new Blob([ this.getPCM() ]);\n    }\n\n    /**\n     * 下载录音pcm数据\n     *\n     * @param {string} [name='recorder']    重命名的名字\n     * @memberof Recorder\n     */\n    downloadPCM(name: string = 'recorder'): void {\n        let pcmBlob = this.getPCMBlob();\n\n        downloadPCM(pcmBlob, name);\n    }\n\n    /**\n     * 获取WAV编码的二进制数据(dataview)\n     *\n     * @returns {dataview}  WAV编码的二进制数据\n     * @memberof Recorder\n     */\n    getWAV(): any {\n        let pcmTemp = this.getPCM();\n\n        // PCM增加44字节的头就是WAV格式了\n        return encodeWAV(pcmTemp, this.inputSampleRate,\n            this.outputSampleRate, this.config.numChannels, this.oututSampleBits, this.littleEdian);\n    }\n\n    /**\n     * 获取WAV音频的blob数据\n     *\n     * @returns { blob }    wav格式blob数据\n     * @memberof Recorder\n     */\n    getWAVBlob(): any {\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\n    }\n\n    /**\n     * 下载录音的wav数据\n     *\n     * @param {string} [name='recorder']    重命名的名字\n     * @memberof Recorder\n     */\n    downloadWAV(name: string = 'recorder'): void {\n        let wavBlob = this.getWAVBlob();\n\n        downloadWAV(wavBlob, name);\n    }\n\n    /**\n     * 通用的下载接口\n     */\n    download(blob, name: string, type: string): void {\n        download(blob, name, type);\n    }\n\n    /**\n     * 获取左和右声道的数据\n     *\n     * @returns [DataView]\n     */\n    getChannelData(): any {\n        const all = this.getPCM();\n        const length = all.byteLength;\n        const littleEdian = this.littleEdian\n        const res = { left: null, right: null }\n\n        if (this.config.numChannels === 2) {\n            // 双通道,劈开\n            const lD = new DataView(new ArrayBuffer(length / 2))\n            const rD = new DataView(new ArrayBuffer(length / 2))\n            // 双声道，需要拆分下数据\n\n            if (this.config.sampleBits === 16) {\n                for (var i = 0; i < length / 2; i += 2) {\n                    lD.setInt16(i, all.getInt16(i * 2, littleEdian), littleEdian)\n                    rD.setInt16(i, all.getInt16(i * 2 + 2, littleEdian), littleEdian)\n                }\n            } else {\n                for (var i = 0; i < length / 2; i += 2) {\n                    lD.setInt8(i, all.getInt8(i * 2))\n                    rD.setInt8(i, all.getInt8(i * 2 + 1))\n                }\n            }\n\n            res.left = lD\n            res.right = rD\n        } else {\n            // 单通道\n            res.left = all\n        }\n\n        return res\n    }\n}\n\nexport default Index;\n","/**\n * 下载录音文件\n * @private\n * @param {*} blob      blob数据\n * @param {string} name 下载的文件名\n * @param {string} type 下载的文件后缀\n */\nfunction _download(blob, name: string, type: string): void {\n    let oA = document.createElement('a');\n\n    oA.href = window.URL.createObjectURL(blob);\n    oA.download = `${ name }.${ type }`;\n    oA.click();\n}\n\n/**\n * 下载录音的wav数据\n *\n * @param {blob}   需要下载的blob数据类型\n * @param {string} [name='recorder']    重命名的名字\n */\nexport function downloadWAV(wavblob, name: string = 'recorder'): void {\n    _download(wavblob, name, 'wav');\n}\n\n/**\n * 下载录音pcm数据\n *\n * @param {blob}   需要下载的blob数据类型\n * @param {string} [name='recorder']    重命名的名字\n * @memberof Recorder\n */\nexport function downloadPCM(pcmBlob, name: string = 'recorder'): void {\n    _download(pcmBlob, name, 'pcm');\n}\n\n// 通用下载接口\nexport function download(blob, name: string, type: string) {\n    return _download(blob, name, type)\n}\n","import { throwError } from '../exception/exception'\n\ndeclare let window: any;\n\nlet source: any = null;\nlet playTime: number = 0;       // 相对时间，记录暂停位置\nlet playStamp: number = 0;      // 开始或暂停后开始的时间戳(绝对)\nlet context: any = null;\nlet analyser: any = null;\n\nlet audioData: any = null;\n// let hasInit: boolean = false;           // 是否已经初始化了\nlet isPaused: boolean = false;\nlet totalTime: number = 0;\nlet endplayFn: any = function() {};\n\n/**\n * 初始化\n */\nfunction init(): void {\n    context = new (window.AudioContext || window.webkitAudioContext)();\n    analyser = context.createAnalyser();\n    analyser.fftSize = 2048;                   // 表示存储频域的大小\n}\n\n/**\n * play\n * @returns {Promise<{}>}\n */\nfunction playAudio(): Promise<{}> {\n    isPaused = false;\n\n    return context.decodeAudioData(audioData.slice(0), buffer => {\n        source = context.createBufferSource();\n\n        // 播放结束的事件绑定\n        source.onended = () => {\n            if (!isPaused) {  // 暂停的时候也会触发该事件\n                // 计算音频总时长\n                totalTime = context.currentTime - playStamp + playTime;\n                endplayFn();\n            }\n\n        }\n\n        // 设置数据\n        source.buffer = buffer;\n        // connect到分析器，还是用录音的，因为播放时不能录音的\n        source.connect(analyser);\n        analyser.connect(context.destination);\n        source.start(0, playTime);\n\n        // 记录当前的时间戳，以备暂停时使用\n        playStamp = context.currentTime;\n    }, function(e) {\n        throwError(e);\n    });\n}\n\n// 销毁source, 由于 decodeAudioData 产生的source每次停止后就不能使用，所以暂停也意味着销毁，下次需重新启动。\nfunction destroySource() {\n    if (source) {\n        source.stop();\n        source = null;\n    }\n}\n\nexport default class Player {\n    /**\n     * play record\n     * @static\n     * @param {ArrayBuffer} arraybuffer\n     * @memberof Player\n     */\n    static play(arraybuffer): Promise<{}> {\n        if (!context) {\n            // 第一次播放要初始化\n            init();\n        }\n        this.stopPlay();\n        // 缓存播放数据\n        audioData = arraybuffer;\n        totalTime = 0;\n\n        return playAudio();\n    }\n\n    /**\n     * 暂停播放录音\n     * @memberof Player\n     */\n    static pausePlay(): void {\n        destroySource();\n        // 多次暂停需要累加\n        playTime += context.currentTime - playStamp;\n        isPaused = true;\n    }\n\n    /**\n     * 恢复播放录音\n     * @memberof Player\n     */\n    static resumePlay(): Promise<{}> {\n        return playAudio();\n    }\n\n    /**\n     * 停止播放\n     * @memberof Player\n     */\n    static stopPlay() {\n        playTime = 0;\n        audioData = null;\n\n        destroySource();\n    }\n\n    static destroyPlay() {\n        this.stopPlay();\n    }\n\n    static getAnalyseData() {\n        let dataArray = new Uint8Array(analyser.frequencyBinCount);\n        // 将数据拷贝到dataArray中。\n        analyser.getByteTimeDomainData(dataArray);\n\n        return dataArray;\n    }\n\n    /**\n     * 增加录音播放完成的事件绑定\n     *\n     * @static\n     * @param {*} [fn=function() {}]\n     * @memberof Player\n     */\n    static addPlayEnd(fn: any = function() {}) {\n        endplayFn = fn;\n    }\n\n    // 获取已经播放的时长\n    static getPlayTime(): number {\n        let pTime = isPaused ? playTime : context.currentTime - playStamp + playTime;\n\n        return totalTime || pTime;\n    }\n}\n","/**\n * 异常处理\n * @static\n * @param {*} message   错误消息\n */\nexport function throwError(message: string) {\n    throw new Error(message);\n}\n","import { encoderToPcmJob } from '../worker';\nimport { compress, encodePCM, encodeWAV } from '../transform/transform';\nimport { createAssistWorker } from 'assist-worker'\n\ndeclare let window: any;\ndeclare let Math: any;\ndeclare let navigator: any;\ndeclare let Promise: any;\n\n// 构造函数参数格式\ninterface recorderConfig {\n    sampleBits?: number,        // 采样位数\n    sampleRate?: number,        // 采样率\n    numChannels?: number,       // 声道数\n    compiling?: boolean,        // 是否边录边播\n    silenceDurationNotify?: number // 沉默多久通知\n    compilingProcess?: boolean // 是否边录边转换\n}\n\nexport default class Recorder {\n    private context: any;\n    protected config: recorderConfig;               // 配置\n    private analyser: any;\n    private size: number = 0;                       // 录音文件总长度\n    private lBuffer: Array<Float32Array> = [];      // pcm音频数据搜集器(左声道)\n    private rBuffer: Array<Float32Array> = [];      // pcm音频数据搜集器(右声道)\n    private PCM: any;                               // 最终的PCM数据缓存，避免多次encode\n    private tempPCM: Array<DataView> = [];          // 边录边转时临时存放pcm的\n    private audioInput: any;\n    protected inputSampleRate: number;              // 输入采样率\n    protected inputSampleBits: number = 16;         // 输入采样位数\n    protected outputSampleRate: number;             // 输出采样率\n    protected oututSampleBits: number;              // 输出采样位数\n    private source: any;                            // 音频输入\n    private recorder: any;\n    private stream: any;                            // 流\n    protected littleEdian: boolean;                 // 是否是小端字节序\n    protected fileSize: number = 0;                 // 录音大小，byte为单位\n    protected duration: number = 0;                 // 录音时长\n    protected speaking: boolean = false;            // 用户是否在讲话\n    protected lastNoSpeakTime: number;          // 没有讲话的时间戳\n    protected silenceHasNotify: boolean;            // 沉默是否通知过了\n    protected silenceDurationNotify: number;        // 沉默通知的时长\n    protected lastProcessAudioDuration: number;     // 上一次处理音频的时间间隔\n    private needRecord: boolean = true;             // 由于safari问题，导致使用该方案代替disconnect/connect方案\n    // 正在录音时间，参数是已经录了多少时间了\n    public onprocess: (duration: number) => void;\n    // onprocess 替代函数，保持原来的 onprocess 向下兼容\n    public onprogress: (payload: {\n        duration: number,\n        fileSize: number,\n        vol: number,\n        // data: Array<DataView>,      // 当前存储的所有录音数据\n    }) => void;\n    public onplay: () => void;                  // 音频播放回调\n    public onpauseplay: () => void;             // 音频暂停回调\n    public onresumeplay: () => void;            // 音频恢复播放回调\n    public onstopplay: () => void;              // 音频停止播放回调\n    public onplayend: () => void;               // 音频正常播放结束\n    public onsilence: () => void;               // 沉默回调\n    public onwav: (wavData: any) => void;\n    /**\n     * @param {Object} options 包含以下三个参数：\n     * sampleBits，采样位数，一般8,16，默认16\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\n     * numChannels，声道，1或2\n     */\n    constructor(options: recorderConfig = {}) {\n        // 临时audioContext，为了获取输入采样率的\n        let context = new (window.AudioContext || window.webkitAudioContext)();\n\n        this.inputSampleRate = context.sampleRate;     // 获取当前输入的采样率\n\n        // 设置输出配置\n        this.setNewOption(options);\n\n        // 判断端字节序\n        this.littleEdian = (function () {\n            let buffer = new ArrayBuffer(2);\n            new DataView(buffer).setInt16(0, 256, true);\n            return new Int16Array(buffer)[0] === 256;\n        })();\n        // 兼容 getUserMedia\n        Recorder.initUserMedia();\n    }\n\n    protected setNewOption(options: recorderConfig = {}) {\n        this.config = {\n            // 采样数位 8, 16\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\n            // 采样率\n            sampleRate: ~[8000, 11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\n            // 声道数，1或2\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\n            // 是否需要边录边转，默认关闭，后期使用web worker\n            // compiling: !!options.compiling || false,   // 先移除\n        };\n        // 设置采样的参数\n        this.outputSampleRate = this.config.sampleRate;     // 输出采样率\n        this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\n        this.silenceDurationNotify = options.silenceDurationNotify || -1\n\n    }\n\n    /**\n     * 开始录音\n     *\n     * @returns {Promise<{}>}\n     * @memberof Recorder\n     */\n    startRecord(): Promise<{}> {\n        if (this.context) {\n            // 关闭先前的录音实例，因为前次的实例会缓存少量前次的录音数据\n            this.destroyRecord();\n        }\n        // 初始化\n        this.initRecorder();\n\n        return navigator.mediaDevices.getUserMedia({\n            audio: true\n        }).then(stream => {\n            // audioInput表示音频源节点\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\n            this.audioInput = this.context.createMediaStreamSource(stream);\n            this.stream = stream;\n        }/* 报错丢给外部使用者catch，后期可在此处增加建议性提示\n            , error => {\n            // 抛出异常\n            Recorder.throwError(error.name + \" : \" + error.message);\n        } */).then(() => {\n            // audioInput 为声音源，连接到处理节点 recorder\n            this.audioInput.connect(this.analyser);\n            this.analyser.connect(this.recorder);\n            // this.audioInput.connect(this.recorder);\n            // 处理节点 recorder 连接到扬声器\n            this.recorder.connect(this.context.destination);\n        });\n    }\n\n    /**\n     * 暂停录音\n     *\n     * @memberof Recorder\n     */\n    pauseRecord(): void {\n        this.needRecord = false;\n    }\n\n    /**\n     * 继续录音\n     *\n     * @memberof Recorder\n     */\n    resumeRecord(): void {\n        this.needRecord = true;\n    }\n\n    /**\n     * 停止录音\n     *\n     */\n    stopRecord(): void {\n        this.audioInput && this.audioInput.disconnect();\n        this.source && this.source.stop();\n        this.recorder.disconnect();\n        this.analyser.disconnect();\n        this.needRecord = true;\n    }\n\n    /**\n     * 销毁录音对象\n     *\n     */\n    destroyRecord(): Promise<{}> {\n        this.clearRecordStatus();\n        // 结束流\n        this.stopStream();\n\n        return this.closeAudioContext();\n    }\n\n    getAnalyseData() {\n        let dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n        // 将数据拷贝到dataArray中。\n        this.analyser.getByteTimeDomainData(dataArray);\n\n        return dataArray;\n    }\n\n    // 获取录音数据\n    getData() {\n        let data: any = this.flat();\n\n        return data;\n    }\n\n    /**\n     * 清除状态\n     *\n     */\n    private clearRecordStatus() {\n        this.lBuffer.length = 0;\n        this.rBuffer.length = 0;\n        this.size = 0;\n        this.fileSize = 0;\n        this.PCM = null;\n        this.audioInput = null;\n        this.duration = 0;\n    }\n\n    /**\n     * 将二维数组转一维\n     *\n     * @private\n     * @returns  {float32array}     音频pcm二进制数据\n     * @memberof Recorder\n     */\n    private flat() {\n        let lData = null,\n            rData = new Float32Array(0);    // 右声道默认为0\n\n        // 创建存放数据的容器\n        if (1 === this.config.numChannels) {\n            lData = new Float32Array(this.size);\n        } else {\n            lData = new Float32Array(this.size / 2);\n            rData = new Float32Array(this.size / 2);\n        }\n        // 合并\n        let offset = 0; // 偏移量计算\n\n        // 将二维数据，转成一维数据\n        // 左声道\n        for (let i = 0; i < this.lBuffer.length; i++) {\n            lData.set(this.lBuffer[i], offset);\n            offset += this.lBuffer[i].length;\n        }\n\n        offset = 0;\n        // 右声道\n        for (let i = 0; i < this.rBuffer.length; i++) {\n            rData.set(this.rBuffer[i], offset);\n            offset += this.rBuffer[i].length;\n        }\n\n        return {\n            left: lData,\n            right: rData\n        };\n    }\n\n    /**\n     * 初始化录音实例\n     */\n    private initRecorder(): void {\n        // 清空数据\n        this.clearRecordStatus();\n\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\n\n        this.analyser = this.context.createAnalyser();  // 录音分析节点\n        this.analyser.fftSize = 2048;                   // 表示存储频域的大小\n\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\n        let createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\n        this.lastProcessAudioDuration = 0\n\n        // 音频采集\n        this.recorder.onaudioprocess = e => {\n            if (!this.needRecord) {\n                return;\n            }\n            // 左声道数据\n            // getChannelData返回Float32Array类型的pcm数据\n            let lData = e.inputBuffer.getChannelData(0),\n                rData = null,\n                vol = 0;        // 音量百分比\n\n            // 计算音量百分比\n            vol = Math.max.apply(Math, lData) * 100;\n\n            if (vol < 5) {\n                console.debug('声音太小，不录')\n                if (this.speaking) {\n                    this.speaking = false\n                    this.lastNoSpeakTime = Date.now()\n                } else if (this.silenceDurationNotify != -1 && Date.now() - this.lastNoSpeakTime > this.silenceDurationNotify) {\n                    // 如果沉默时长需要通知，并且沉默时长大于设定值，则通知\n                    if (this.silenceHasNotify) {\n                        return\n                    } else {\n                        this.silenceHasNotify = true\n                        this.onsilence && this.onsilence()\n                    }\n                }\n                // 录音时长及响度回调\n                this.onprogress && this.onprogress({\n                    duration: this.duration,\n                    fileSize: this.fileSize,\n                    vol,\n                });\n                return\n            }\n            this.speaking = true\n\n            this.lBuffer.push(new Float32Array(lData));\n\n            this.size += lData.length;\n\n            // 判断是否有右声道数据\n            if (2 === this.config.numChannels) {\n                rData = e.inputBuffer.getChannelData(1);\n                this.rBuffer.push(new Float32Array(rData));\n\n                this.size += rData.length;\n            }\n\n            // 统计录音时长\n            this.duration += 4096 / this.inputSampleRate;\n            if (this.duration - this.lastProcessAudioDuration >= 2) {\n                this.lastProcessAudioDuration = this.duration;\n                const worker = createAssistWorker().onMessage((message) => {\n                    worker.terminate()\n                    this.onwav && this.onwav(message)\n                }).create(encoderToPcmJob);\n                worker.run({\n                    lBuffer:this.lBuffer, rBuffer: this.rBuffer,numChannels: this.config.numChannels, size: this.size, inputSampleRate: this.inputSampleRate,\n                    outputSampleRate: this.outputSampleRate, oututSampleBits: this.oututSampleBits,\n                    littleEdian: this.littleEdian\n                });\n            }\n\n            // 边录边转处理 暂时不支持\n            // if (this.config.compiling) {\n            //     let pcm = this.transformIntoPCM(lData, rData);\n\n            //     this.tempPCM.push(pcm);\n            //     // 计算录音大小\n            //     this.fileSize = pcm.byteLength * this.tempPCM.length;\n            // } else {\n            // 计算录音大小\n            this.fileSize = Math.floor(this.size / Math.max(this.inputSampleRate / this.outputSampleRate, 1))\n                * (this.oututSampleBits / 8)\n        // }\n        // 为何此处计算大小需要分开计算。原因是先录后转时，是将所有数据一起处理，边录边转是单个 4096 处理，\n        // 有小数位的偏差。\n\n        // 录音时长回调\n        this.onprocess && this.onprocess(this.duration);\n        // 录音时长及响度回调\n        this.onprogress && this.onprogress({\n            duration: this.duration,\n            fileSize: this.fileSize,\n            vol,\n        });\n    }\n}\n\n    /**\n     * 终止流（这可以让浏览器上正在录音的标志消失掉）\n     * @private\n     * @memberof Recorder\n     */\n    private stopStream() {\n    if (this.stream && this.stream.getTracks) {\n        this.stream.getTracks().forEach(track => track.stop());\n        this.stream = null;\n    }\n}\n\n    /**\n     * close兼容方案\n     * 如firefox 30 等低版本浏览器没有 close方法\n     */\n    private closeAudioContext() {\n    if (this.context && this.context.close && this.context.state !== 'closed') {\n        return this.context.close();\n    } else {\n        return new Promise((resolve) => {\n            resolve();\n        });\n    }\n}\n\n    // getUserMedia 版本兼容\n    static initUserMedia() {\n    if (navigator.mediaDevices === undefined) {\n        navigator.mediaDevices = {};\n    }\n\n    if (navigator.mediaDevices.getUserMedia === undefined) {\n        navigator.mediaDevices.getUserMedia = function (constraints) {\n            let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n            if (!getUserMedia) {\n                return Promise.reject(new Error('浏览器不支持 getUserMedia !'));\n            }\n\n            return new Promise(function (resolve, reject) {\n                getUserMedia.call(navigator, constraints, resolve, reject);\n            });\n        }\n    }\n}\n\n    /**\n     * 将获取到到左右声道的Float32Array数据编码转化\n     *\n     * @param {Float32Array} lData  左声道数据\n     * @param {Float32Array} rData  有声道数据\n     * @returns DataView\n     */\n    private transformIntoPCM(lData, rData) {\n    let lBuffer = new Float32Array(lData),\n        rBuffer = new Float32Array(rData);\n\n    let data = compress({\n        left: lBuffer,\n        right: rBuffer,\n    }, this.inputSampleRate, this.outputSampleRate);\n\n    return encodePCM(data, this.oututSampleBits, this.littleEdian);\n}\n\n    static getPermission(): Promise < {} > {\n    this.initUserMedia();\n\n    return navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n        stream && stream.getTracks().forEach(track => track.stop());\n    });\n}\n}\n","import assistWorker from \"assist-worker\";\nexport const encoderToPcmJob = ({ lBuffer, rBuffer, numChannels, size, inputSampleRate, outputSampleRate, oututSampleBits, littleEdian }: any, workerMethods) => {\n    // take out the method in the object containing the worker thread internal control method\n    const { postMessage } = workerMethods;\n    /**\n     * 在data中的offset位置开始写入str字符串\n     * @param {TypedArrays} data    二进制数据\n     * @param {Number}      offset  偏移量\n     * @param {String}      str     字符串\n     */\n    function writeString(data, offset, str): void {\n        for (let i = 0; i < str.length; i++) {\n            data.setUint8(offset + i, str.charCodeAt(i));\n        }\n    }\n    function flat(lBuffer,rBuffer,size, numChannels) {\n        let lData = null,\n            rData = new Float32Array(0);    // 右声道默认为0\n\n        // 创建存放数据的容器\n        if (1 === numChannels) {\n            lData = new Float32Array(size);\n        } else {\n            lData = new Float32Array(size / 2);\n            rData = new Float32Array(size / 2);\n        }\n        // 合并\n        let offset = 0; // 偏移量计算\n\n        // 将二维数据，转成一维数据\n        // 左声道\n        for (let i = 0; i < lBuffer.length; i++) {\n            lData.set(lBuffer[i], offset);\n            offset += lBuffer[i].length;\n        }\n\n        offset = 0;\n        // 右声道\n        for (let i = 0; i < rBuffer.length; i++) {\n            rData.set(rBuffer[i], offset);\n            offset += rBuffer[i].length;\n        }\n\n        return {\n            left: lData,\n            right: rData\n        };\n    }\n\n    function compress(data, inputSampleRate: number, outputSampleRate: number) {\n        // 压缩，根据采样率进行压缩\n        let rate = inputSampleRate / outputSampleRate,\n            compression = Math.max(rate, 1),\n            lData = data.left,\n            rData = data.right,\n            length = Math.floor((lData.length + rData.length) / rate),\n            result = new Float32Array(length),\n            index = 0,\n            j = 0;\n\n        // 循环间隔 compression 位取一位数据\n        while (index < length) {\n            // 取整是因为存在比例compression不是整数的情况\n            let temp = Math.floor(j);\n\n            result[index] = lData[temp];\n            index++;\n\n            if (rData.length) {\n                /*\n                * 双声道处理\n                * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\n                * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\n                */\n                result[index] = rData[temp];\n                index++;\n            }\n\n            j += compression;\n        }\n        // 返回压缩后的一维数据\n        return result;\n    }\n\n    function encodePCM(bytes, sampleBits: number, littleEdian: boolean = true) {\n        let offset = 0,\n            dataLength = bytes.length * (sampleBits / 8),\n            buffer = new ArrayBuffer(dataLength),\n            data = new DataView(buffer);\n\n        // 写入采样数据\n        if (sampleBits === 8) {\n            for (let i = 0; i < bytes.length; i++, offset++) {\n                // 范围[-1, 1]\n                let s = Math.max(-1, Math.min(1, bytes[i]));\n                // 8位采样位划分成2^8=256份，它的范围是0-255;\n                // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\n                let val = s < 0 ? s * 128 : s * 127;\n                val = +val + 128;\n                data.setInt8(offset, val);\n            }\n        } else {\n            for (let i = 0; i < bytes.length; i++, offset += 2) {\n                let s = Math.max(-1, Math.min(1, bytes[i]));\n                // 16位的划分的是2^16=65536份，范围是-32768到32767\n                // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\n                data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, littleEdian);\n            }\n        }\n\n        return data;\n    }\n\n    function encodeWAV(bytes: any, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number, littleEdian: boolean = true) {\n        let sampleRate = outputSampleRate > inputSampleRate ? inputSampleRate : outputSampleRate,   // 输出采样率较大时，仍使用输入的值，\n            sampleBits = oututSampleBits,\n            buffer = new ArrayBuffer(44 + bytes.byteLength),\n            data = new DataView(buffer),\n            channelCount = numChannels, // 声道\n            offset = 0;\n\n        // 资源交换文件标识符\n        writeString(data, offset, 'RIFF'); offset += 4;\n        // 下个地址开始到文件尾总字节数,即文件大小-8\n        data.setUint32(offset, 36 + bytes.byteLength, littleEdian); offset += 4;\n        // WAV文件标志\n        writeString(data, offset, 'WAVE'); offset += 4;\n        // 波形格式标志\n        writeString(data, offset, 'fmt '); offset += 4;\n        // 过滤字节,一般为 0x10 = 16\n        data.setUint32(offset, 16, littleEdian); offset += 4;\n        // 格式类别 (PCM形式采样数据)\n        data.setUint16(offset, 1, littleEdian); offset += 2;\n        // 声道数\n        data.setUint16(offset, channelCount, littleEdian); offset += 2;\n        // 采样率,每秒样本数,表示每个通道的播放速度\n        data.setUint32(offset, sampleRate, littleEdian); offset += 4;\n        // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\n        data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), littleEdian); offset += 4;\n        // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\n        data.setUint16(offset, channelCount * (sampleBits / 8), littleEdian); offset += 2;\n        // 采样位数\n        data.setUint16(offset, sampleBits, littleEdian); offset += 2;\n        // 数据标识符\n        writeString(data, offset, 'data'); offset += 4;\n        // 采样数据总数,即数据总大小-44\n        data.setUint32(offset, bytes.byteLength, littleEdian); offset += 4;\n\n        // 给wav头增加pcm体\n        for (let i = 0; i < bytes.byteLength;) {\n            data.setUint8(offset, bytes.getUint8(i));\n            offset++;\n            i++;\n        }\n\n        return data;\n    }\n\n    const {left,right} = flat(lBuffer, rBuffer, size, numChannels)\n    let data = compress({\n        left: left,\n        right: right,\n    }, inputSampleRate, outputSampleRate);\n\n    const result = encodePCM(data, oututSampleBits, littleEdian)\n    const wav = encodeWAV(result, inputSampleRate, outputSampleRate, numChannels, oututSampleBits, littleEdian)\n    console.debug('处理好了数据', wav)\n    postMessage(wav)\n};\n","const WORKER_MESSAGE = 'WORKER_MESSAGE';\nconst JOB_RESULT = 'JOB_RESULT';\n/**\n * 判断值是否是可转移的对象，在使用中可以使用快速且高效的零拷贝操作\n * @param {any} value 待判断的值\n * @returns {boolean} 是否是可转移的对象\n */\nconst isTransferables = (value) => value instanceof ArrayBuffer ||\n    value instanceof MessagePort ||\n    (self.ImageBitmap && value instanceof ImageBitmap);\n/**\n * 创建一个Web Workers API封装对象\n * @returns {object} Web Workers API封装对象\n */\nconst createAssistWorker = () => {\n    // 记录所有的工作流程的执行凭证\n    const jobs = [];\n    // 收集所有worker线程需要用到的主线程数据\n    let collections = new Map();\n    // 记录主线程设置的信息接收器\n    let onMessage;\n    // Web Workers API封装对象\n    const assistWorker = {\n        collect: (data) => {\n            for (let key in data) {\n                collections.set(key, data[key]);\n            }\n            return assistWorker;\n        },\n        onMessage: (handler) => {\n            onMessage = handler;\n            return assistWorker;\n        },\n        create: (job) => {\n            // 核心工作流程脚本\n            const majorScript = job.toString();\n            // 组合成worker脚本\n            const workerScript = `\n        // 将收集到的变量声明和定义加入脚本字符串，后面函数执行的时候便不会出现not defined的错误了\n        ${Object.entries(Object.fromEntries(collections)).reduce((variablesStr, [key, value]) => {\n                let variable = typeof value === 'function'\n                    ? `${key}=${value};`\n                    : `${key}=JSON.parse(\"${JSON.stringify(value)}\");`;\n                return variablesStr + variable;\n            }, '')}\n  \n        // 声明定义用于判断是否是可转移对象的函数\n        $isTransferables = ${isTransferables}\n  \n        // 在脚本中声明并定义一个包含工作流程的函数体\n        $job=${majorScript};\n  \n        // 给worker线程添加消息监听，等待主线程的发号施令\n        onmessage=e=>{\n          const { index, args } = e.data;\n  \n          Promise.resolve(\n            $job.apply($job, args.concat([{\n              postMessage: (message) => postMessage({ type: '${WORKER_MESSAGE}', message }),\n              close: self.close,\n            }]))\n          ).then(result => {\n            postMessage({ type: '${JOB_RESULT}', message: { index, result } }, [result].filter($isTransferables))\n          }).catch(error => {\n            postMessage({ type: '${JOB_RESULT}', message: { index, error } })\n          })\n        }\n      `;\n            // 主线程下创建worker线程\n            const workerURL = URL.createObjectURL(new Blob([workerScript], { type: 'text/javascript' }));\n            const worker = new Worker(workerURL);\n            // 监听接收worker线程发的消息\n            worker.onmessage = function (e) {\n                const data = e.data;\n                if (data.type === WORKER_MESSAGE)\n                    if (onMessage)\n                        onMessage.call(onMessage, data.message);\n                if (data.type === JOB_RESULT) {\n                    const { index, result, error } = data.message;\n                    const { done } = jobs[index];\n                    done(error, result);\n                }\n            };\n            /**\n             * 执行工作流程\n             * @param {...any} args 动态参数\n             * @returns {Promise<any>} 工作流程执行结果\n             */\n            const run = (...args) => {\n                return new Promise((resolve, reject) => {\n                    const index = jobs.length;\n                    jobs.push({\n                        done: (error, result) => {\n                            if (error)\n                                reject(error);\n                            else\n                                resolve(result);\n                        },\n                    });\n                    worker.postMessage({ index, args }, args.filter(isTransferables));\n                });\n            };\n            /**\n             * 终止worker线程\n             */\n            const terminate = () => {\n                worker.terminate();\n                URL.revokeObjectURL(workerURL);\n                jobs.length = 0;\n                collections.clear();\n                onMessage = undefined;\n            };\n            return { run, terminate };\n        },\n    };\n    return assistWorker;\n};\n\nexport { createAssistWorker };\n"],"sourceRoot":""}